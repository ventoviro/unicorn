{"version":3,"file":"s3-uploader.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,GACtB,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,GAAO,G,wGCL9D,MAAMC,EAAY,CAAC,EACnB,IAAIC,EACG,SAASC,EAAYC,EAAMC,EAAU,CAAC,GAIzC,OAHKJ,EAAUG,KACXH,EAAUG,GAAQE,EAAOF,EAAMC,IAE5BJ,EAAUG,EACrB,CACO,SAASZ,EAAIY,GAChB,OAAOG,QAAQC,QAAQF,EAAOF,GAClC,CACO,SAASE,EAAOF,EAAMC,EAAU,CAAC,GACpC,OAAO,IAAII,EAAWL,EAAMC,EAChC,CAIO,SAASK,EAAQN,UACbH,EAAUG,EACrB,CACO,SAASO,EAAKC,GACjBV,EAAIU,EACJV,EAAEW,OAAO,WAAWC,WAAW,cACnC,CACA,MAAMC,EAAiB,CACnBC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,WAAY,CACRC,IAAK,GACLC,OAAQ,GACRnC,IAAK,GACLoC,OAAQ,GACR,kBAAmB,GACnB,mBAAoB,GACpB,aAAc,GACd,kBAAmB,KAG3B,SAASC,EAAa/B,KAAQgC,GAC1B,OAAOvB,EAAEW,OAAO,WACXW,aAAa/B,KAAQgC,EAC9B,CACA,MAAMhB,UAAmBiB,QAAQC,IAAI,SAClCC,KAAKF,QAAQG,aACZzB,KACAC,QACA,WAAAyB,CAAY1B,EAAMC,EAAU,CAAC,GACzB0B,QACAC,KAAK5B,KAAOA,EACZ,MAAM6B,EAAa/B,EAAEgC,KAAK,gBAAkB9B,IAAS,CAAC,EACtD4B,KAAK3B,QAAUmB,EAAa,CAAC,EAAGnB,EAAS4B,EAAYlB,EACzD,CAIA,YAAMoB,CAAOC,EAAMC,EAAMhC,EAAU,CAAC,GAChC,MAAMiC,EAAW,IAAIC,SACfC,EAAShB,EAAa,CAAC,EAAGnB,EAAQe,YAAc,CAAC,EAAGY,KAAK3B,QAAQe,YACnD,iBAATgB,IACPA,EAAO,IAAIK,KAAK,CAACL,GAAO,CAAEM,KAAMrC,EAAQ,iBAAmB,iBAE1D+B,aAAgBK,MAASL,aAAgBO,QAC1CtC,EAAQ,gBAAkBA,EAAQ,iBAAmB+B,EAAKM,MAE1DrC,EAAkB,WAClBA,EAAQ,uBAAyB,gCAAoCuC,mBAAmBvC,EAAkB,WAE9GA,EAAa,IAAIwC,EAAYb,KAAK3B,QAAQY,WAAa,IAAM,IACvD4B,EAAYR,GAClBhC,EAAa,IAAIwC,EAAYxC,EAAa,KAC1CA,EAAQ,gBAAkBA,EAAQ,sBAAmByC,EACrDzC,EAAQ,uBAAyBA,EAAQ,6BAA0ByC,EAEnE,IAAK,IAAI3D,KAAOqD,EACZF,EAASS,IAAI5D,EAAKqD,EAAOrD,IAG7B,IAAK,IAAIA,KAAOE,OAAO2D,KAAKhB,KAAK3B,QAAQc,aACjCd,EAAQlB,IACRmD,EAASS,IAAI5D,EAAKkB,EAAQlB,IAGlCmD,EAASW,OAAO,OAAQb,GACxBJ,KAAKkB,QAAQ,QAASZ,GACtB,IACI,IAAIa,QAAYjD,EAAEW,OAAO,SAASuC,KAAKpB,KAAK3B,QAAQW,UAAY,GAAIsB,EAAU,CAC1Ee,iBAAmBC,IACXjD,EAAQgD,kBACRhD,EAAQgD,iBAAiBC,GAE7BtB,KAAKkB,QAAQ,kBAAmBI,GACjB,MAAXA,EAAEC,OACFvB,KAAKkB,QAAQ,WAAYI,EAAEE,OAASF,EAAEC,MAAOD,EACjD,IAGR,MAAMG,EAAMzB,KAAK3B,QAAQa,WAAa,IAChC2B,EAAYR,GAGlB,OAFAL,KAAKkB,QAAQ,UAAWO,EAAKN,GAC7BA,EAAIM,IAAMA,EACHN,CACX,CACA,QACInB,KAAKkB,QAAQ,MACjB,CACJ,EAEJ,SAASL,EAAYa,GACjB,OAAOA,EAAIC,QAAQ,aAAc,GACrC,C","sources":["webpack://./src/modules/aws/s3-uploader.ts/webpack/universalModuleDefinition","webpack://./src/modules/aws/s3-uploader.ts/webpack/bootstrap","webpack://./src/modules/aws/s3-uploader.ts/webpack/runtime/define property getters","webpack://./src/modules/aws/s3-uploader.ts/webpack/runtime/hasOwnProperty shorthand","webpack://./src/modules/aws/s3-uploader.ts/webpack/runtime/make namespace object","webpack://./src/modules/aws/s3-uploader.ts/./src/modules/aws/s3-uploader.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"S3Uploader\"] = factory();\n\telse\n\t\troot[\"S3Uploader\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const instances = {};\nlet u;\nexport function getInstance(name, options = {}) {\n    if (!instances[name]) {\n        instances[name] = create(name, options);\n    }\n    return instances[name];\n}\nexport function get(name) {\n    return Promise.resolve(create(name));\n}\nexport function create(name, options = {}) {\n    return new S3Uploader(name, options);\n}\n/**\n * @param {string} name\n */\nexport function destroy(name) {\n    delete instances[name];\n}\nexport function init(app) {\n    u = app;\n    u.inject('$loader').asImported('s3.uploader');\n}\nconst defaultOptions = {\n    endpoint: '',\n    subfolder: '',\n    viewerHost: '',\n    starts_with: [],\n    formInputs: {\n        acl: '',\n        bucket: '',\n        key: '',\n        Policy: '',\n        'X-Amz-Algorithm': '',\n        'X-Amz-Credential': '',\n        'X-Amz-Date': '',\n        'X-Amz-Signature': '',\n    }\n};\nfunction defaultsDeep(obj, ...args) {\n    return u.inject('$helper')\n        .defaultsDeep(obj, ...args);\n}\nclass S3Uploader extends Unicorn.mix(class {\n}).with(Unicorn.EventMixin) {\n    name;\n    options;\n    constructor(name, options = {}) {\n        super();\n        this.name = name;\n        const awsOptions = u.data('@s3.uploader.' + name) || {};\n        this.options = defaultsDeep({}, options, awsOptions, defaultOptions);\n    }\n    /**\n     * Do upload.\n     */\n    async upload(file, path, options = {}) {\n        const fileData = new FormData();\n        const inputs = defaultsDeep({}, options.formInputs || {}, this.options.formInputs);\n        if (typeof file === 'string') {\n            file = new Blob([file], { type: options['Content-Type'] || 'text/plain' });\n        }\n        if ((file instanceof Blob) || file instanceof File) {\n            options['Content-Type'] = options['Content-Type'] || file.type;\n        }\n        if (options['filename']) {\n            options['Content-Disposition'] = 'attachment; filename*=UTF-8\\'\\'' + encodeURIComponent(options['filename']);\n        }\n        options['key'] = trimSlashes(this.options.subfolder || '') + '/'\n            + trimSlashes(path);\n        options['key'] = trimSlashes(options['key']);\n        options['Content-Type'] = options['Content-Type'] || undefined;\n        options['Content-Disposition'] = options['Content-Disposition'] || undefined;\n        // Prepare pre-signed data\n        for (let key in inputs) {\n            fileData.set(key, inputs[key]);\n        }\n        // Prepare custom data\n        for (let key of Object.keys(this.options.starts_with)) {\n            if (options[key]) {\n                fileData.set(key, options[key]);\n            }\n        }\n        fileData.append('file', file);\n        this.trigger('start', fileData);\n        try {\n            let res = await u.inject('$http').post(this.options.endpoint || '', fileData, {\n                onUploadProgress: (e) => {\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress(e);\n                    }\n                    this.trigger('upload-progress', e);\n                    if (e.total != null) {\n                        this.trigger('progress', e.loaded / e.total, e);\n                    }\n                }\n            });\n            const url = this.options.viewerHost + '/'\n                + trimSlashes(path);\n            this.trigger('success', url, res);\n            res.url = url;\n            return res;\n        }\n        finally {\n            this.trigger('end');\n        }\n    }\n}\nfunction trimSlashes(str) {\n    return str.replace(/^\\/+|\\/+$/g, '');\n}\nexport { S3Uploader };\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","instances","u","getInstance","name","options","create","Promise","resolve","S3Uploader","destroy","init","app","inject","asImported","defaultOptions","endpoint","subfolder","viewerHost","starts_with","formInputs","acl","bucket","Policy","defaultsDeep","args","Unicorn","mix","with","EventMixin","constructor","super","this","awsOptions","data","upload","file","path","fileData","FormData","inputs","Blob","type","File","encodeURIComponent","trimSlashes","undefined","set","keys","append","trigger","res","post","onUploadProgress","e","total","loaded","url","str","replace"],"sourceRoot":""}