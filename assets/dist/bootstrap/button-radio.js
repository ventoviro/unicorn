const u=window.u,defaultOptions={selector:".btn-group .radio",buttonClass:"btn",activeClass:"active",color:{default:"btn-default btn-outline-secondary",green:"btn-success",red:"btn-danger",blue:"btn-primary"}};export class ButtonRadio{static handle(t,s={}){return u.getBoundedInstance(t,"button-radio",(t=>new this(t,s)))}constructor(t,s={}){let e;this.radios=[],this.inputs=[],this.buttons=[],this.colors=[],this.options={},this.element=u.selectOne(t),this.options=s=u.defaultsDeep({},s,defaultOptions),e=null!=this.element.dataset.fieldInput?this.element:this.element.querySelector("[data-field-input]"),this.wrapper=e;let a=e.querySelector(".btn-group");const l=null!=a;a||(a=u.h("div",{class:"btn-group"})),this.radios=u.selectAll(e.querySelectorAll(".radio")),this.radios.forEach((t=>{const s=this.prepareButton(t,l);l||a.appendChild(s)})),this.syncState(),e.insertBefore(a,e.firstChild),e.dispatchEvent(new Event("button-radio.loaded")),this.colors=[...new Set(this.colors)]}prepareButton(t,s=!1){const e=this.options,a=t.querySelector("input"),l=t.querySelector("label");let i;s?(i=this.wrapper.querySelector(`[data-for="${a.id}"]`),i.classList.add(...this.parseClasses(`${e.buttonClass} ${e.color.default}`))):i=u.h("button",{type:"button",class:`${e.buttonClass} ${e.color.default}`,"data-value":a.value},`<span>${l.innerHTML}</span>`),u.$helper.set(i,"__unicorn.input",a),this.inputs.push(a),this.buttons.push(i),t.style.display="none";let n=a.dataset.colorClass||"";if(null==n){switch(a.value){case"":n=e.color.blue;break;case"0":n=e.color.red;break;default:n=e.color.green}a.dataset.colorClass=n}return this.colors.push(n),(a.disabled||null!=a.getAttribute("readonly"))&&(i.classList.add("disabled"),i.disabled=!0),null!=a.getAttribute("readonly")&&i.classList.add("readonly"),i.addEventListener("click",(()=>{if(a.getAttribute("disabled")||a.getAttribute("readonly"))return;!a.checked&&(this.inputs.forEach((t=>{t.checked=!1})),a.checked=!0,a.dispatchEvent(new Event("change")),a.dispatchEvent(new Event("input")))})),a.addEventListener("change",(()=>{this.syncState()})),i}syncState(){const t=this.options;this.buttons.forEach((s=>{const e=u.$helper.get(s,"__unicorn.input");s.classList.add(...this.parseClasses(t.color.default)),s.classList.remove(...this.parseClasses(t.activeClass)),s.classList.remove(...this.parseClasses(...this.colors)),e.checked&&(s.classList.add(...this.parseClasses(t.activeClass)),s.classList.add(...this.parseClasses(e.dataset.colorClass)),s.classList.remove(...this.parseClasses(t.color.default)))}))}parseClasses(...t){return t.join(" ").split(" ").filter((t=>""!==t))}}