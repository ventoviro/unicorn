{"version":3,"sources":["bootstrap/button-radio.js"],"names":["System","register","_export","_context","defaultOptions","_defineProperty","obj","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","setters","execute","selector","buttonClass","activeClass","color","default","static","el","red","options","arguments","length","blue","u","getBoundedInstance","this","constructor","handle","defaultsDeep","wrapper","dataset","fieldInput","selectOne","element","querySelector","inputGroup","exists","h","radios","forEach","prepareButton","radio","class","appendChild","button","firstChild","syncState","insertBefore","dispatchEvent","label","id","add","parseClasses","type","innerHTML","classList","inputs","push","display","$helper","buttons","style","green","colors","disabled","getAttribute","checked","ele","addEventListener","Event","changed","get","remove","colorClass","_key","_len","className","filter"],"mappings":"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","file":"button-radio.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nconst defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper = null;\n  radios = [];\n  inputs = [];\n  buttons = [];\n  colors = [];\n\n  static handle(el, options = {}) {\n    return u.getBoundedInstance(el, 'button-radio', (el) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector, options) {\n    this.element = u.selectOne(selector);\n    this.options = options = u.defaultsDeep({}, options, defaultOptions);\n    let wrapper = null;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]');\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector('.btn-group');\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = u.h('div', { class: 'btn-group' })\n    }\n\n    this.radios = wrapper.querySelectorAll('.radio');\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input');\n    const label = radio.querySelector('label');\n\n    let button = null;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`);\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = u.h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    u.$helper.set(button, '__unicorn.input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass;\n\n    if (color == null) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue;\n          break;\n\n        case '0':\n          color = options.color.red;\n          break;\n\n        default:\n          color = options.color.green;\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        this.syncState();\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input = u.$helper.get(button, '__unicorn.input');\n\n      button.classList.add(...this.parseClasses(options.color.default));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass));\n        button.classList.remove(...this.parseClasses(options.color.default));\n      }\n    });\n  }\n\n  parseClasses(...className) {\n    className = className.join(' ');\n    return className.split(' ').filter(t => t !== '');\n  }\n}\n"]}