{"version":3,"sources":["bootstrap/button-radio.js"],"names":["System","register","_export","_context","defaultOptions","_defineProperty","obj","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","setters","execute","selector","buttonClass","activeClass","color","default","green","red","blue","handle","el","options","arguments","length","u","getBoundedInstance","this","constructor","element","selectOne","defaultsDeep","wrapper","dataset","fieldInput","querySelector","inputGroup","h","radios","querySelectorAll","forEach","radio","exists","appendChild","button","syncState","firstChild","insertBefore","colors","Set","prepareButton","id","add","parseClasses","classList","type","class","$helper","set","label","innerHTML","inputs","push","display","colorClass","getAttribute","disabled","addEventListener","checked","ele","changed","Event","dispatchEvent","buttons","get","remove","_len","className","Array","_key","join"],"mappings":"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","file":"button-radio.js","sourcesContent":["const defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper = null;\n  radios = [];\n  inputs = [];\n  buttons = [];\n  colors = [];\n\n  static handle(el, options = {}) {\n    return u.getBoundedInstance(el, 'button-radio', (el) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector, options) {\n    this.element = u.selectOne(selector);\n    this.options = options = u.defaultsDeep({}, options, defaultOptions);\n    let wrapper = null;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]');\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector('.btn-group');\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = u.h('div', { class: 'btn-group' })\n    }\n\n    this.radios = wrapper.querySelectorAll('.radio');\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input');\n    const label = radio.querySelector('label');\n\n    let button = null;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`);\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = u.h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    u.$helper.set(button, '__unicorn.input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass;\n\n    if (color == null) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue;\n          break;\n\n        case '0':\n          color = options.color.red;\n          break;\n\n        default:\n          color = options.color.green;\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    input.addEventListener('change', () => {\n      this.syncState();\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input = u.$helper.get(button, '__unicorn.input');\n\n      button.classList.add(...this.parseClasses(options.color.default));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass));\n        button.classList.remove(...this.parseClasses(options.color.default));\n      }\n    });\n  }\n\n  parseClasses(...className) {\n    className = className.join(' ');\n    return className.split(' ').filter(t => t !== '');\n  }\n}\n"]}