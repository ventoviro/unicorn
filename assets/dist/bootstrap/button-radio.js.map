{"version":3,"sources":["bootstrap/button-radio.js"],"names":["defaultOptions","selector","buttonClass","activeClass","color","green","red","blue","ButtonRadio","options","element","u","selectOne","defaultsDeep","wrapper","dataset","fieldInput","querySelector","inputGroup","exists","h","radios","querySelectorAll","forEach","radio","button","prepareButton","appendChild","syncState","insertBefore","firstChild","dispatchEvent","Event","colors","Set","input","label","id","classList","add","parseClasses","type","value","innerHTML","$helper","set","inputs","push","buttons","style","display","colorClass","disabled","getAttribute","addEventListener","changed","checked","ele","get","remove","className","join","split","filter","t","el","getBoundedInstance"],"mappings":"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","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nconst defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper = null;\n  radios = [];\n  inputs = [];\n  buttons = [];\n  colors = [];\n\n  static handle(el, options = {}) {\n    return u.getBoundedInstance(el, 'button-radio', (el) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector, options) {\n    this.element = u.selectOne(selector);\n    this.options = options = u.defaultsDeep({}, options, defaultOptions);\n    let wrapper = null;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]');\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector('.btn-group');\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = u.h('div', { class: 'btn-group' })\n    }\n\n    this.radios = wrapper.querySelectorAll('.radio');\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input');\n    const label = radio.querySelector('label');\n\n    let button = null;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`);\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = u.h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    u.$helper.set(button, '__unicorn.input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass;\n\n    if (color == null) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue;\n          break;\n\n        case '0':\n          color = options.color.red;\n          break;\n\n        default:\n          color = options.color.green;\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        this.syncState();\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input = u.$helper.get(button, '__unicorn.input');\n\n      button.classList.add(...this.parseClasses(options.color.default));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass));\n        button.classList.remove(...this.parseClasses(options.color.default));\n      }\n    });\n  }\n\n  parseClasses(...className) {\n    className = className.join(' ');\n    return className.split(' ').filter(t => t !== '');\n  }\n}\n"],"file":"button-radio.js"}