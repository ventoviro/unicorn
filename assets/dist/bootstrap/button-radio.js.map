{"version":3,"sources":["bootstrap/button-radio.js"],"names":["System","register","_export","_context","defaultOptions","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","setters","execute","selector","buttonClass","activeClass","color","default","static","el","red","options","arguments","length","undefined","blue","u","getBoundedInstance","this","constructor","handle","defaultsDeep","wrapper","element","dataset","fieldInput","selectOne","querySelector","inputGroup","exists","h","radios","forEach","prepareButton","radio","class","appendChild","button","firstChild","syncState","insertBefore","dispatchEvent","label","input","id","add","parseClasses","type","innerHTML","classList","inputs","push","display","$helper","buttons","style","green","colors","disabled","getAttribute","checked","ele","addEventListener","Event","changed","get","remove","colorClass","_key","_len","className","filter"],"mappings":"AAAAA,OAAOC,SAAS,IAAI,SAAUC,EAASC,GAGrC,IAgBsBC,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,KAAAD,EAAAG,OAAAC,eAAAJ,EAAAC,EAAA,CAAAC,MAAAA,EAAAG,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAP,EAAAC,GAAAC,EAAAF,CAAA,CAAA,OAAAJ,EAAA,mBAAA,GAAA,CAAAY,QAAA,GAAAC,QAAA,WAnBxBX,EAAA,CACAY,SAAA,oBACAC,YAAA,MACAC,YAAA,SACAC,MAAA,CACAC,QAAA,oCAEMhB,MAAAA,cACJY,IAAAA,aACAC,KAAAA,gBAWIf,EARF,cAAW,MASPmB,cARGC,GACPC,IAAGC,EAAEC,UAAYC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,CAAA,EACjBG,OAAMC,EAAAC,mBAAAR,EAAA,gBAAAA,GACR,IAAAS,KAAAT,EAAAE,IACD,CASCQ,YAAOC,EAAyBT,GAAAnB,EAAP0B,KAAA,UAAA,MACvB1B,EAASyB,KAAAA,SAAuB,IAG1BzB,EAFO0B,KAASP,SAAQ,IAC9BnB,EAAE0B,KAAA,UAAA,IACJ1B,EAAA0B,KAAA,SAAA,IAEAC,KAAAA,QAAYhB,EAAAA,UAAiBA,GAAEe,KAAAP,QAAAA,EAAAK,EAAAK,aAZjB,CAAA,EAAAV,EAAApB,GAAA,IAAA+B,EAAA,KAaZA,EATS,MADCJ,KAAAK,QAAAC,QAAAC,WAUEP,KAAKQ,QAENR,KAAGK,QAAII,cAAA,sBAElBT,KAAAI,QAAAA,EAOM,IAAIM,EAAaN,EAAQK,cAAc,cAL7C,MAAIE,EAAqBJ,MAAhBF,EACPD,IACDM,EAAMZ,EAAAc,EAAA,MAAA,CACLR,MAAO,eAITJ,KAAIU,OAAUN,EAAGA,iBAAsB,UACvCJ,KAAAa,OAAYC,SAAGJ,IAEf,MAAKA,EAAYV,KAAAe,cAAAC,EAAAL,GACfD,GAA0BO,EAAOC,YAAAC,EAAY,IAG/CnB,KAAKa,YAELT,EAAKS,aAAeG,EAASZ,EAAAgB,YAKvBhB,EAJEe,cAAcJ,IAAAA,MAAAA,wBAMhBf,KAHFU,OAAU,IAACQ,IAAAA,IAAWlB,KAACmB,QAIvB,CACAJ,cAHFC,GAEF,IAAIL,EAACU,UAAW1B,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEhBU,MAAAA,EAAQkB,KAAaZ,QAErBN,EAAQmB,EAAAA,cAAwB,SACpBC,EAAQR,EAAMP,cAAc,SACxC,IAAAU,EAAA,KACIR,GACNQ,EAAAnB,KAAAI,QAAAK,cAAA,cAAAgB,EAAAC,QAEAX,EAAAA,UAAqCY,OAAA3B,KAAA4B,aAAA,GAAAnC,EAAAP,eAAAO,EAAAL,MAAA,aACnC+B,EAAM1B,EAAOmB,EAAA,SAAQnB,CAErBoC,KAAMJ,SACNR,MAAW,GAAGD,EAAMP,eAAchB,EAAQL,MAAA,UAEtC+B,aAAaM,EAAAhD,OAEbkC,SAAQa,EAAAM,oBADNhC,EAGJqB,QAAOY,IAAAA,EAAa,kBAASH,GAC/B5B,KAACgC,OAAMC,KAAAR,GAFDzB,KAGJmB,QAAWP,KACTO,GAHEH,EAKAa,MAAMK,QAAQ,OAHd,IAKA9C,EAAAqC,EAAcA,QAAMhD,WAJpB,GAMD,MADAW,EACa,CAElB,OAAAqC,EAAAhD,OAEE0D,IAAO,GACJH,EAAOC,EAAU7C,MAACS,KAClBuC,MAELpB,IAAMqB,IARMjD,EAAQK,EAAQL,MAAMI,IAUlC,MACIJ,QAEAA,EAASK,EAAML,MAAAkD,MAPXb,EAUFrC,QAAQK,WAAcI,CATtB,CAyBA,OAxBAG,KAWFuC,OAAQN,KAAA7C,IAVFqC,EAWJrC,UAAyB,MAATA,EAAMI,aAAG,eAVvB2B,EAWFY,UAAAJ,IAAA,YAVER,EAYJqB,UAAA,GAEE,MAZIf,EAYJgB,aAAA,aAAMtB,EAAAY,UAAAJ,IAAA,YAMZR,EAAKoB,iBAAkB,SAAA,KAEvB,GAAId,EAAMe,aAAYf,aAAkBA,EAACgB,aAAe,YACtDtB,QAEFM,EAAAiB,UAGEvB,KAAOY,OAAAA,SAAcY,IACvBA,EAAAD,SAAA,CAAA,IAEAjB,EAAAiB,SAAA,EACAvB,KAAOyB,YACLnB,EAAIA,cAAkB,IAACoB,MAAA,WACrBpB,EAAAF,cAAA,IAAAsB,MAAA,UACF,IAIIC,CAjBF,CACAzB,YACE,MAkBA5B,EAAAO,KAAAP,QAjBAO,KAmBFyB,QAAMiB,SAAUvB,IAlBZ,MAoBAM,EAACJ,EAASc,QAAEY,IAAA5B,EAAA,mBAnBZA,EAqBCY,UAACR,OAAcvB,KAAI6C,aAAgBpD,EAAAL,MAAAC,UApBpC8B,EAqBCY,UAACR,UAAkBsB,KAAMjB,aAASnC,EAAAN,cACzCgC,EAAAY,UAAAiB,UAAAhD,KAAA4B,gBAAA5B,KAAAuC,SACAd,EAAAiB,UAEFvB,EAAOA,UAAMQ,OAAA3B,KAAA4B,aAAAnC,EAAAN,cACfgC,EAAAY,UAAAJ,OAAA3B,KAAA4B,aAAAH,EAAAnB,QAAA2C,aAEA5B,EAAYU,UAAAiB,UAAAhD,KAAA4B,aAAAnC,EAAAL,MAAAC,UACV,GArBI,CACAuC,eACE,IAyBJT,IAAOY,EAAAA,UAAiBpC,OAAQiC,EAAY,IAACnC,MAAQN,GAAAA,EAAa,EAAA+D,EAAAC,EAAAD,IAClE/B,EAAOY,GAAUiB,UAAUE,GAtBvB,OADAE,EA0BKrB,EAAUJ,KAAI,MACdI,MAAUJ,KAAO0B,QAAKzB,GAAaH,KAAbG,GAzB7B,GAEJ,EAEJ","file":"button-radio.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nconst defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper = null;\n  radios = [];\n  inputs = [];\n  buttons = [];\n  colors = [];\n\n  static handle(el, options = {}) {\n    return u.getBoundedInstance(el, 'button-radio', (el) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector, options) {\n    this.element = u.selectOne(selector);\n    this.options = options = u.defaultsDeep({}, options, defaultOptions);\n    let wrapper = null;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]');\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector('.btn-group');\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = u.h('div', { class: 'btn-group' })\n    }\n\n    this.radios = wrapper.querySelectorAll('.radio');\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input');\n    const label = radio.querySelector('label');\n\n    let button = null;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`);\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = u.h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    u.$helper.set(button, '__unicorn.input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass;\n\n    if (color == null) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue;\n          break;\n\n        case '0':\n          color = options.color.red;\n          break;\n\n        default:\n          color = options.color.green;\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        this.syncState();\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input = u.$helper.get(button, '__unicorn.input');\n\n      button.classList.add(...this.parseClasses(options.color.default));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass));\n        button.classList.remove(...this.parseClasses(options.color.default));\n      }\n    });\n  }\n\n  parseClasses(...className) {\n    className = className.join(' ');\n    return className.split(' ').filter(t => t !== '');\n  }\n}\n"]}