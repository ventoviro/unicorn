{"version":3,"sources":["bootstrap/button-radio.js"],"names":["System","register","_export","_context","defaultOptions","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","Symbol","iterator","from","_iterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","length","i","arr2","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_defineProperty","obj","value","setters","execute","selector","buttonClass","activeClass","color","default","green","ButtonRadio","options","blue","_this","this","instance","Constructor","_classCallCheck","element","u","selectOne","defaultsDeep","wrapper","dataset","fieldInput","querySelector","exists","inputGroup","h","class","querySelectorAll","forEach","radio","button","prepareButton","appendChild","syncState","insertBefore","firstChild","Event","colors","Set","protoProps","staticProps","arguments","undefined","input","label","_button$classList","concat","id","classList","add","apply","parseClasses","type","$helper","set","inputs","push","buttons","style","display","colorClass","red","disabled","getAttribute","addEventListener","checked","_this2","ele","dispatchEvent","_this3","_button$classList2","_button$classList3","_button$classList4","_button$classList5","_button$classList6","_button$classList7","get","remove","_len","className","_key","join","split","filter","t","_this4","getBoundedInstance","el"],"mappings":"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","file":"button-radio.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nconst defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper = null;\n  radios = [];\n  inputs = [];\n  buttons = [];\n  colors = [];\n\n  static handle(el, options = {}) {\n    return u.getBoundedInstance(el, 'button-radio', (el) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector, options) {\n    this.element = u.selectOne(selector);\n    this.options = options = u.defaultsDeep({}, options, defaultOptions);\n    let wrapper = null;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]');\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector('.btn-group');\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = u.h('div', { class: 'btn-group' })\n    }\n\n    this.radios = wrapper.querySelectorAll('.radio');\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input');\n    const label = radio.querySelector('label');\n\n    let button = null;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`);\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = u.h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    u.$helper.set(button, '__unicorn.input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass;\n\n    if (color == null) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue;\n          break;\n\n        case '0':\n          color = options.color.red;\n          break;\n\n        default:\n          color = options.color.green;\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        this.syncState();\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input = u.$helper.get(button, '__unicorn.input');\n\n      button.classList.add(...this.parseClasses(options.color.default));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass));\n        button.classList.remove(...this.parseClasses(options.color.default));\n      }\n    });\n  }\n\n  parseClasses(...className) {\n    className = className.join(' ');\n    return className.split(' ').filter(t => t !== '');\n  }\n}\n"]}