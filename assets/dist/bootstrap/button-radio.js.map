{"version":3,"sources":["bootstrap/button-radio.js"],"names":["System","register","_export","_context","setters","execute","selector","buttonClass","activeClass","color","default","defaultOptions","green","ButtonRadio","options","instance","Constructor","TypeError","red","this","Error"],"mappings":"AAAAA,OAAOC,SAAS,IAAI,SAAUC,EAASC,GAOrC,MAAO,CACLC,QAAS,GACTC,QAAS,YATb,CACAC,SAAA,oBACAC,YAAA,MACAC,YAAA,SACAC,MAAA,CACAC,QAAA,oCAEMC,MAAAA,cACJL,IAAAA,aACAC,KAAAA,iBAIEK,EAAAA,eAFK,SAAAC,EAAAP,EAAAQ,GAAA,MANP,SAAyBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIC,UAAU,qCAS9GC,CAAKC,KAHAN,GAAA,IAAAO,MAAA","file":"button-radio.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nconst defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  constructor(selector, options) {\n    throw new Error('ButtonRadio Work in process');\n\n    this.element = u.selectOne(selector);\n    this.options = u.defaultsDeep({}, options, defaultOptions);\n    let colors = [];\n\n    // Turn radios into btn-group\n    const $radios = this.element.querySelectorAll(this.options.selector);\n\n    options = this.options;\n\n    u.selectAll($radios, ($radio) => {\n      $radio.classList.add(options.buttonClass);\n      $radio.classList.add(options.color['default']);\n    });\n\n    $radios.on('click', e => {\n      const $btn = $(e.currentTarget);\n      const $group = $btn.parent().find('.' + options.buttonClass);\n      const $input = $btn.find('input[type=radio]');\n\n      if ($input.prop('disabled') || $input.prop('readonly')) {\n        return;\n      }\n\n      if (!$input.prop('checked')) {\n        $group\n          .addClass(options.color.default)\n          .removeClass(options.activeClass)\n          .removeClass(colors);\n\n        $btn.addClass(options.activeClass).addClass($input.attr('data-color-class')).removeClass(options.color.default);\n\n        $input.prop('checked', true);\n        $input[0].dispatchEvent(new Event('change'));\n      }\n    });\n\n    $radios.each(function () {\n      const $radio = $(this);\n      const $input = $radio.find('input');\n      const $label = $radio.find('label');\n      const $text = $('<span>' + $label.text() + '</span>');\n\n      $label.hide();\n      $input.hide();\n      $radio.prepend($text);\n      $radio.removeClass('radio');\n\n      // Prepare color schema\n      let color = $input.attr('data-color-class');\n\n      if (color == null) {\n        switch ($input.val()) {\n          case '':\n            color = options.color.blue;\n            break;\n\n          case '0':\n            color = options.color.red;\n            break;\n\n          default:\n            color = options.color.green;\n            break;\n        }\n\n        $input.attr('data-color-class', color);\n      }\n\n      colors.push(color);\n\n      if ($input.prop('checked')) {\n        $radio.removeClass(options.color.default).addClass(options.activeClass).addClass(color);\n      }\n\n      if ($input.prop('disabled')) {\n        $radio.addClass('disabled');\n      }\n\n      if ($input.prop('readonly')) {\n        $radio.addClass('readonly');\n      }\n    });\n\n    $radios.parent().trigger('button-radio.loaded');\n\n    // Make color elements unique\n    colors = $.unique(colors);\n  }\n}\n"]}