{"version":3,"sources":["bootstrap/button-radio.js"],"names":["System","register","_export","_context","defaultOptions","_defineProperty","obj","key","value","i","t","r","e","Symbol","toPrimitive","call","TypeError","String","Number","_toPrimitive","Object","defineProperty","enumerable","configurable","writable","setters","execute","selector","buttonClass","activeClass","color","default","green","red","blue","handle","el","options","arguments","length","undefined","u","getBoundedInstance","this","constructor","element","selectOne","defaultsDeep","wrapper","dataset","fieldInput","querySelector","inputGroup","h","radios","querySelectorAll","forEach","radio","exists","appendChild","button","syncState","firstChild","insertBefore","colors","Set","prepareButton","input","id","add","parseClasses","classList","type","class","$helper","set","label","innerHTML","inputs","push","display","colorClass","getAttribute","disabled","addEventListener","checked","ele","changed","Event","dispatchEvent","buttons","get","remove","_len","className","Array","_key","join"],"mappings":"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","file":"button-radio.js","sourcesContent":["const defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper = null;\n  radios = [];\n  inputs = [];\n  buttons = [];\n  colors = [];\n\n  static handle(el, options = {}) {\n    return u.getBoundedInstance(el, 'button-radio', (el) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector, options) {\n    this.element = u.selectOne(selector);\n    this.options = options = u.defaultsDeep({}, options, defaultOptions);\n    let wrapper = null;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]');\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector('.btn-group');\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = u.h('div', { class: 'btn-group' })\n    }\n\n    this.radios = wrapper.querySelectorAll('.radio');\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input');\n    const label = radio.querySelector('label');\n\n    let button = null;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`);\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = u.h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    u.$helper.set(button, '__unicorn.input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass;\n\n    if (color == null) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue;\n          break;\n\n        case '0':\n          color = options.color.red;\n          break;\n\n        default:\n          color = options.color.green;\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    input.addEventListener('change', () => {\n      this.syncState();\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input = u.$helper.get(button, '__unicorn.input');\n\n      button.classList.add(...this.parseClasses(options.color.default));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass));\n        button.classList.remove(...this.parseClasses(options.color.default));\n      }\n    });\n  }\n\n  parseClasses(...className) {\n    className = className.join(' ');\n    return className.split(' ').filter(t => t !== '');\n  }\n}\n"]}