{"version":3,"sources":["bootstrap/keep-tab.js"],"names":["System","register","_export","_context","LoadTab","setters","execute","obj","key","value","constructor","selector","options","arguments","length","undefined","uid","id","$element","this","u","selectOne","tabButtons","querySelectorAll","TAB_ITEM_SELECTOR","storageKey","hashCode","location","href","setTimeout","switchTab","console","warn","bindEvents","forEach","button","addEventListener","window","localStorage","setItem","getButtonHref","dataset","bsTarget","target","findTabButtonByHref","filter","call","shift","tabTrigger","show","hasTab","getItem","removeItem","tabhref","text","md5","Object","defineProperty","enumerable","configurable","writable"],"mappings":"AAAAA,OAAOC,SAAS,IAAI,SAAUC,EAASC,GAGrC,IAIWC,EAAO,OAAAF,EAAA,eAAA,GAAA,CAAAG,QAAA,GAAAC,QAAA,WAAA,IAAAC,EAAAC,EAAAC,EAPpBP,EAAA,UAAAE,EAAA,MACAM,YAAAC,GACA,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,CAAA,EACAG,EAAAL,EACA,iBAAAA,IACAK,EAAAJ,EAAAI,KAAAL,EAAAM,IAKE,MAAAC,EAAAC,KAAAD,SAAAE,EAAAC,UAAAV,GACFO,GAIAC,KAAAD,SAAAA,EACAC,KAAAG,WAAAJ,EAAAK,iBAAAJ,KAAAT,YAAAc,mBACAL,KAAAM,WAAA,YAAAN,KAAAO,SAAAC,SAAAC,KAAA,IAAAZ,GACEN,KAAAA,QAAYC,EAAwBQ,KAAdP,aACpBiB,YAAUlB,KAEVQ,KAAIW,WAAOnB,GACTK,KAAMJ,QAAQI,OAAOL,IAV3BoB,QAAAC,KAAA,qBAAArB,eAiBQ,CACAsB,aAHJ,GAAAC,QAAKhB,KAAUC,KAAAG,YAAAa,IACbJ,EAAOK,iBAAO,SAAA,KACdC,OAAAC,aAAAC,QAAApB,KAAAM,WAAAN,KAAAqB,cAAAL,GAAA,GACF,GAMI,CACAK,cAFCf,GACL,OAAKb,EAAO6B,QAAUC,UAAAP,EAAAM,QAAAE,QAAAR,EAAAP,IAGlB,CACAgB,oBAAahB,GACX,OAACE,EAAAA,UAAWX,KAAAD,SAAAK,iBAAAJ,KAAAT,YAAAc,oBAAAqB,QAAAV,GACfA,EAAKvB,OAAagB,IAIlBM,EAAQY,QAAUxB,WAAaa,GAG9BE,EAAOC,QAAaC,SAAQX,KAC7BmB,OAAC,CAINP,YAAAA,GACE,MAAAQ,EAAcP,KAAQC,oBAAmBD,GAC3CO,GAEAJ,IAAAA,UAAAA,IAAoBhB,GAAMqB,MADpB,CAEAC,OAIAtB,GAHE,OAKoC,MAAlCO,KAAMS,oBAAiBhB,EAJ3B,CAEAE,YAOF,GACCiB,aAAOI,QAAAhC,KAAAM,YAAA,CACZ,IAAAN,KAAA+B,OAAAZ,aAAAa,QAAAhC,KAAAM,aAEA,OARYa,aAAac,WAAWjC,KAAKM,aAQzC,EAIF,MAAA4B,EAAAf,aAAAa,QAAAhC,KAAAM,YAEIN,KAAM6B,YAAaK,EALb,CACF,CAEA3B,SAAS4B,GASf,OAAAlC,EAAAmC,IAAAD,EACF,IAjFoB7C,EAmFpB,mFAnFoBD,EAmFpB,uBAnFoBD,EAmFpBH,GAnFoBoD,OAAAC,eAAAlD,EAAAC,EAAA,CAAAC,MAAAA,EAAAiD,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAArD,EAAAC,GAAAC,CAoFpB,EAEA","file":"keep-tab.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nexport class LoadTab {\n  static TAB_ITEM_SELECTOR = '[data-toggle=tab],[data-bs-toggle=tab],[data-toggle=pill],[data-bs-toggle=pill]';\n\n  /**\n   * Class init.\n   *\n   * @param {HTMLElement|string} selector\n   * @param {Object}      options\n   *\n   * @constructor\n   */\n  constructor(selector, options = {}) {\n    let uid = selector;\n\n    if (typeof selector === 'object') {\n      uid = options.uid || selector.id;\n    }\n\n    const $element = this.$element = u.selectOne(selector);\n\n    if (!$element) {\n      console.warn(`[KeepTab] Element ${selector} not found.`);\n      return;\n    }\n\n    this.$element = $element;\n    this.tabButtons = $element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR);\n\n    this.storageKey = 'tab-href-' + this.hashCode(location.href + ':' + uid);\n    this.options = options;\n\n    this.bindEvents();\n\n    setTimeout(() => {\n      this.switchTab();\n    }, this.options.delay || 0);\n  }\n\n  bindEvents() {\n    [].forEach.call(this.tabButtons, (button) => {\n      button.addEventListener('click', () => {\n        // Store the selected tab href in localstorage\n        window.localStorage.setItem(this.storageKey, this.getButtonHref(button));\n      });\n    });\n  }\n\n  getButtonHref(button) {\n    return button.dataset.bsTarget || button.dataset.target || button.href\n  }\n\n  findTabButtonByHref(href) {\n    return u.selectAll(this.$element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR))\n      .filter((button) => {\n        if (button.href === href) {\n          return true;\n        }\n\n        if (button.dataset.bsTarget === href) {\n          return true;\n        }\n\n        return button.dataset.target === href;\n      })\n      .shift();\n  }\n\n  /**\n   * Active tab.\n   *\n   * @param {string} href\n   */\n  activateTab(href) {\n    const tabTrigger = this.findTabButtonByHref(href);\n\n    if (tabTrigger) {\n      (new bootstrap.Tab(tabTrigger)).show();\n    }\n  }\n\n  /**\n   * Has tab.\n   *\n   * @param {string} href\n   *\n   * @returns {*}\n   */\n  hasTab(href) {\n    return this.findTabButtonByHref(href) != null;\n  }\n\n  /**\n   * Switch tab.\n   *\n   * @returns {boolean}\n   */\n  switchTab() {\n    if (localStorage.getItem(this.storageKey)) {\n      // When moving from tab area to a different view\n      if (!this.hasTab(localStorage.getItem(this.storageKey))) {\n        localStorage.removeItem(this.storageKey);\n        return true;\n      }\n\n      // Clean default tabs\n      // u.selectOne(this.$element, '[data-toggle=\"tab\"], [data-bs-toggle=tab]')\n      // this.$element.querySelector('a[data-toggle=\"tab\"]').parent().removeClass('active');\n\n      const tabhref = localStorage.getItem(this.storageKey);\n\n      // Add active attribute for selected tab indicated by url\n      this.activateTab(tabhref);\n\n      // Check whether internal tab is selected (in format <tabname>-<id>)\n      // const seperatorIndex = tabhref.indexOf('-');\n      //\n      // if (seperatorIndex !== -1) {\n      //   const singular = tabhref.substring(0, seperatorIndex);\n      //   const plural = singular + 's';\n      //\n      //   this.activateTab(plural);\n      // }\n    }\n  }\n\n  /**\n   * Hash code.\n   *\n   * @param {String} text\n   *\n   * @returns {number}\n   */\n  hashCode(text) {\n    return u.md5(text);\n  }\n}\n"]}