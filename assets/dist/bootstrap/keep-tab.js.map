{"version":3,"sources":["bootstrap/keep-tab.js"],"names":["System","register","_export","_context","LoadTab","_defineProperty","obj","key","value","i","t","r","e","Symbol","toPrimitive","call","TypeError","String","Number","_toPrimitive","Object","defineProperty","enumerable","configurable","writable","setters","execute","constructor","selector","options","arguments","length","undefined","uid","id","$element","this","u","selectOne","tabButtons","TAB_ITEM_SELECTOR","storageKey","hashCode","location","href","setTimeout","warn","switchTab","delay","bindEvents","forEach","button","window","setItem","getButtonHref","dataset","bsTarget","target","findTabButtonByHref","addEventListener","selectAll","querySelectorAll","filter","localStorage","activateTab","tabTrigger","bootstrap","Tab","show","hasTab","getItem","removeItem","tabhref","text","md5"],"mappings":"AAAAA,OAAOC,SAAS,IAAI,SAAUC,EAASC,GAGrC,IAHWC,EAAO,SAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAA,OAAAF,EAAA,iBAAAE,EAAA,SAAAC,EAAAC,GAAA,GAAA,iBAAAD,IAAAA,EAAA,OAAAA,EAAA,IAAAE,EAAAF,EAAAG,OAAAC,aAAA,QAAA,IAAAF,EAAA,CAAA,IAAAH,EAAAG,EAAAG,KAAAL,EAAAC,GAAA,WAAA,GAAA,iBAAAF,EAAA,OAAAA,EAAA,MAAA,IAAAO,UAAA,+CAAA,CAAA,OAAA,WAAAL,EAAAM,OAAAC,QAAAR,EAAA,CAAAS,CAAAZ,EAAA,WAAAE,EAAAA,EAAA,MAAAH,EAAAc,OAAAC,eAAAf,EAAAC,EAAA,CAAAC,MAAAA,EAAAc,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAC,GAAAC,EAAAF,CAAA,CAAA,OAAAJ,EAAA,eAAA,GAAA,CAAAuB,QAAA,GAAAC,QAAA,WAAAxB,EAAA,UAAPE,EAAN,MAGL,WAAAuB,CAAAC,GACF,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,CAAA,EACAG,EAAAL,EACA,iBAAAA,IACAK,EAAAJ,EAAAI,KAAAL,EAAAM,IAEA,MAAAC,EAAAC,KAAAD,SAAAE,EAAAC,UAAAV,GACAO,GAIIC,KAAID,SAAOP,EAULQ,KATDG,WAAWN,EAAOL,iBAAWQ,KAAAT,YAAAa,mBAClCJ,KAAAK,WAAA,YAAAL,KAAAM,SAAAC,SAAAC,KAAA,IAAAX,GAEAG,KAAAP,QAAcA,EAEdO,KAAKD,aAQCU,YAPIC,KACRV,KAAAW,WAAA,GACFX,KAAAP,QAAAmB,OAAA,IAZFrB,QAAYC,KAAAA,qBAAwBA,eAoB9B,CACA,UAAAqB,GAJJ,GAAAC,QAAKT,KAAUL,KAAGG,YAAcY,IAChCA,EAAKtB,iBAAiB,SAAA,KAElBuB,OAACH,aAAYI,QAAAjB,KAAAK,WAAAL,KAAAkB,cAAAH,GAAA,GAEjBN,GAKI,CAFN,aAAAS,CAAAH,GAEAF,OAAAA,EAAaM,QAAAC,UAAAL,EAAAI,QAAAE,QAAAN,EAAAP,IAGP,CACA,mBAAAc,CAFKC,GAGH,OAFFtB,EAAAuB,UAAAxB,KAAAD,SAAA0B,iBAAAzB,KAAAT,YAAAa,oBAAAsB,QAAAX,GACAC,EAAOW,OAAAA,IAGbZ,EAAAI,QAAAC,WAAAZ,GAIAO,EAAAI,QAAAE,SAAAb,KAEAc,OACM,CAEA,WAAAM,CACEpB,GAAA,MACFqB,EAAA7B,KAAAsB,oBAAAd,GAEAqB,GADI,IAEFC,UAAWC,IAAAF,GAAAG,MAAb,CAMN,MAAAC,CAAAzB,GAHQ,OAAyC,MAAlCR,KAAKsB,oBAAoBd,EAKxC,CAEF,SAAAG,GACA,GAAAgB,aAAAO,QAAAlC,KAAAK,YAAA,CACA,IAAAL,KAAAiC,OAAAN,aAAAO,QAAAlC,KAAAK,aAEI,OADFuB,aAAkBO,WAAAnC,KAAAK,aACVwB,EAKR,MAAAO,EAAAT,aAAAO,QAAAlC,KAAAK,YAEAL,KAAA4B,YAAAQ,EAEF,CACA,CAEA,QAAA9B,CAAA+B,GACA,OAAApC,EAAAqC,IAAAD,EACEJ,IAHIhE,EAKJD,EAAA,oBAAA,kFAJE,EAOJ","file":"keep-tab.js","sourcesContent":["export class LoadTab {\n  static TAB_ITEM_SELECTOR = '[data-toggle=tab],[data-bs-toggle=tab],[data-toggle=pill],[data-bs-toggle=pill]';\n\n  /**\n   * Class init.\n   *\n   * @param {HTMLElement|string} selector\n   * @param {Object}      options\n   *\n   * @constructor\n   */\n  constructor(selector, options = {}) {\n    let uid = selector;\n\n    if (typeof selector === 'object') {\n      uid = options.uid || selector.id;\n    }\n\n    const $element = this.$element = u.selectOne(selector);\n\n    if (!$element) {\n      console.warn(`[KeepTab] Element ${selector} not found.`);\n      return;\n    }\n\n    this.$element = $element;\n    this.tabButtons = $element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR);\n\n    this.storageKey = 'tab-href-' + this.hashCode(location.href + ':' + uid);\n    this.options = options;\n\n    this.bindEvents();\n\n    setTimeout(() => {\n      this.switchTab();\n    }, this.options.delay || 0);\n  }\n\n  bindEvents() {\n    [].forEach.call(this.tabButtons, (button) => {\n      button.addEventListener('click', () => {\n        // Store the selected tab href in localstorage\n        window.localStorage.setItem(this.storageKey, this.getButtonHref(button));\n      });\n    });\n  }\n\n  getButtonHref(button) {\n    return button.dataset.bsTarget || button.dataset.target || button.href\n  }\n\n  findTabButtonByHref(href) {\n    return u.selectAll(this.$element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR))\n      .filter((button) => {\n        if (button.href === href) {\n          return true;\n        }\n\n        if (button.dataset.bsTarget === href) {\n          return true;\n        }\n\n        return button.dataset.target === href;\n      })\n      .shift();\n  }\n\n  /**\n   * Active tab.\n   *\n   * @param {string} href\n   */\n  activateTab(href) {\n    const tabTrigger = this.findTabButtonByHref(href);\n\n    if (tabTrigger) {\n      (new bootstrap.Tab(tabTrigger)).show();\n    }\n  }\n\n  /**\n   * Has tab.\n   *\n   * @param {string} href\n   *\n   * @returns {*}\n   */\n  hasTab(href) {\n    return this.findTabButtonByHref(href) != null;\n  }\n\n  /**\n   * Switch tab.\n   *\n   * @returns {boolean}\n   */\n  switchTab() {\n    if (localStorage.getItem(this.storageKey)) {\n      // When moving from tab area to a different view\n      if (!this.hasTab(localStorage.getItem(this.storageKey))) {\n        localStorage.removeItem(this.storageKey);\n        return true;\n      }\n\n      // Clean default tabs\n      // u.selectOne(this.$element, '[data-toggle=\"tab\"], [data-bs-toggle=tab]')\n      // this.$element.querySelector('a[data-toggle=\"tab\"]').parent().removeClass('active');\n\n      const tabhref = localStorage.getItem(this.storageKey);\n\n      // Add active attribute for selected tab indicated by url\n      this.activateTab(tabhref);\n\n      // Check whether internal tab is selected (in format <tabname>-<id>)\n      // const seperatorIndex = tabhref.indexOf('-');\n      //\n      // if (seperatorIndex !== -1) {\n      //   const singular = tabhref.substring(0, seperatorIndex);\n      //   const plural = singular + 's';\n      //\n      //   this.activateTab(plural);\n      // }\n    }\n  }\n\n  /**\n   * Hash code.\n   *\n   * @param {String} text\n   *\n   * @returns {number}\n   */\n  hashCode(text) {\n    return u.md5(text);\n  }\n}\n"]}