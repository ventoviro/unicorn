{"version":3,"sources":["bootstrap/keep-tab.js"],"names":["System","register","_export","_context","LoadTab","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","setters","execute","value","selector","_this","this","options","arguments","undefined","uid","id","$element","u","selectOne","querySelectorAll","TAB_ITEM_SELECTOR","storageKey","hashCode","location","href","bindEvents","setTimeout","switchTab","delay","console","warn","concat","protoProps","staticProps","_this2","tabButtons","button","localStorage","setItem","getButtonHref","dataset","bsTarget","forEach","filter","addEventListener","shift","tabTrigger","bootstrap","Tab","show","findTabButtonByHref","getItem","hasTab","removeItem","activateTab","tabhref","text","md5"],"mappings":"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","file":"keep-tab.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nexport class LoadTab {\n  static TAB_ITEM_SELECTOR = '[data-toggle=tab],[data-bs-toggle=tab],[data-toggle=pill],[data-bs-toggle=pill]';\n\n  /**\n   * Class init.\n   *\n   * @param {HTMLElement|string} selector\n   * @param {Object}      options\n   *\n   * @constructor\n   */\n  constructor(selector, options = {}) {\n    let uid = selector;\n\n    if (typeof selector === 'object') {\n      uid = options.uid || selector.id;\n    }\n\n    const $element = this.$element = u.selectOne(selector);\n\n    if (!$element) {\n      console.warn(`[KeepTab] Element ${selector} not found.`);\n      return;\n    }\n\n    this.$element = $element;\n    this.tabButtons = $element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR);\n\n    this.storageKey = 'tab-href-' + this.hashCode(location.href + ':' + uid);\n    this.options = options;\n\n    this.bindEvents();\n\n    setTimeout(() => {\n      this.switchTab();\n    }, this.options.delay || 0);\n  }\n\n  bindEvents() {\n    [].forEach.call(this.tabButtons, (button) => {\n      button.addEventListener('click', () => {\n        // Store the selected tab href in localstorage\n        window.localStorage.setItem(this.storageKey, this.getButtonHref(button));\n      });\n    });\n  }\n\n  getButtonHref(button) {\n    return button.dataset.bsTarget || button.dataset.target || button.href\n  }\n\n  findTabButtonByHref(href) {\n    return u.selectAll(this.$element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR))\n      .filter((button) => {\n        if (button.href === href) {\n          return true;\n        }\n\n        if (button.dataset.bsTarget === href) {\n          return true;\n        }\n\n        return button.dataset.target === href;\n      })\n      .shift();\n  }\n\n  /**\n   * Active tab.\n   *\n   * @param {string} href\n   */\n  activateTab(href) {\n    const tabTrigger = this.findTabButtonByHref(href);\n\n    if (tabTrigger) {\n      (new bootstrap.Tab(tabTrigger)).show();\n    }\n  }\n\n  /**\n   * Has tab.\n   *\n   * @param {string} href\n   *\n   * @returns {*}\n   */\n  hasTab(href) {\n    return this.findTabButtonByHref(href) != null;\n  }\n\n  /**\n   * Switch tab.\n   *\n   * @returns {boolean}\n   */\n  switchTab() {\n    if (localStorage.getItem(this.storageKey)) {\n      // When moving from tab area to a different view\n      if (!this.hasTab(localStorage.getItem(this.storageKey))) {\n        localStorage.removeItem(this.storageKey);\n        return true;\n      }\n\n      // Clean default tabs\n      // u.selectOne(this.$element, '[data-toggle=\"tab\"], [data-bs-toggle=tab]')\n      // this.$element.querySelector('a[data-toggle=\"tab\"]').parent().removeClass('active');\n\n      const tabhref = localStorage.getItem(this.storageKey);\n\n      // Add active attribute for selected tab indicated by url\n      this.activateTab(tabhref);\n\n      // Check whether internal tab is selected (in format <tabname>-<id>)\n      // const seperatorIndex = tabhref.indexOf('-');\n      //\n      // if (seperatorIndex !== -1) {\n      //   const singular = tabhref.substring(0, seperatorIndex);\n      //   const plural = singular + 's';\n      //\n      //   this.activateTab(plural);\n      // }\n    }\n  }\n\n  /**\n   * Hash code.\n   *\n   * @param {String} text\n   *\n   * @returns {number}\n   */\n  hashCode(text) {\n    return u.md5(text);\n  }\n}\n"]}