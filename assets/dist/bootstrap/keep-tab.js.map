{"version":3,"sources":["bootstrap/keep-tab.js"],"names":["System","register","_export","_context","LoadTab","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","setters","execute","value","selector","_this","this","options","arguments","undefined","uid","id","$element","u","selectOne","tabButtons","querySelectorAll","TAB_ITEM_SELECTOR","storageKey","hashCode","location","href","bindEvents","setTimeout","switchTab","console","warn","concat","protoProps","staticProps","_this2","forEach","call","button","setItem","getButtonHref","dataset","bsTarget","filter","addEventListener","shift","tabTrigger","findTabButtonByHref","show","localStorage","getItem","hasTab","removeItem","bootstrap","Tab","activateTab","tabhref","text","md5"],"mappings":"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","file":"keep-tab.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nexport class LoadTab {\n  static TAB_ITEM_SELECTOR = '[data-toggle=tab],[data-bs-toggle=tab],[data-toggle=pill],[data-bs-toggle=pill]';\n\n  /**\n   * Class init.\n   *\n   * @param {HTMLElement|string} selector\n   * @param {Object}      options\n   *\n   * @constructor\n   */\n  constructor(selector, options = {}) {\n    let uid = selector;\n\n    if (typeof selector === 'object') {\n      uid = options.uid || selector.id;\n    }\n\n    const $element = this.$element = u.selectOne(selector);\n\n    if (!$element) {\n      console.warn(`[KeepTab] Element ${selector} not found.`);\n      return;\n    }\n\n    this.$element = $element;\n    this.tabButtons = $element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR);\n\n    this.storageKey = 'tab-href-' + this.hashCode(location.href + ':' + uid);\n    this.options = options;\n\n    this.bindEvents();\n\n    setTimeout(() => {\n      this.switchTab();\n    }, this.options.delay || 0);\n  }\n\n  bindEvents() {\n    [].forEach.call(this.tabButtons, (button) => {\n      button.addEventListener('click', () => {\n        // Store the selected tab href in localstorage\n        window.localStorage.setItem(this.storageKey, this.getButtonHref(button));\n      });\n    });\n  }\n\n  getButtonHref(button) {\n    return button.dataset.bsTarget || button.dataset.target || button.href\n  }\n\n  findTabButtonByHref(href) {\n    return u.selectAll(this.$element.querySelectorAll(this.constructor.TAB_ITEM_SELECTOR))\n      .filter((button) => {\n        if (button.href === href) {\n          return true;\n        }\n\n        if (button.dataset.bsTarget === href) {\n          return true;\n        }\n\n        return button.dataset.target === href;\n      })\n      .shift();\n  }\n\n  /**\n   * Active tab.\n   *\n   * @param {string} href\n   */\n  activateTab(href) {\n    const tabTrigger = this.findTabButtonByHref(href);\n\n    if (tabTrigger) {\n      (new bootstrap.Tab(tabTrigger)).show();\n    }\n  }\n\n  /**\n   * Has tab.\n   *\n   * @param {string} href\n   *\n   * @returns {*}\n   */\n  hasTab(href) {\n    return this.findTabButtonByHref(href) != null;\n  }\n\n  /**\n   * Switch tab.\n   *\n   * @returns {boolean}\n   */\n  switchTab() {\n    if (localStorage.getItem(this.storageKey)) {\n      // When moving from tab area to a different view\n      if (!this.hasTab(localStorage.getItem(this.storageKey))) {\n        localStorage.removeItem(this.storageKey);\n        return true;\n      }\n\n      // Clean default tabs\n      // u.selectOne(this.$element, '[data-toggle=\"tab\"], [data-bs-toggle=tab]')\n      // this.$element.querySelector('a[data-toggle=\"tab\"]').parent().removeClass('active');\n\n      const tabhref = localStorage.getItem(this.storageKey);\n\n      // Add active attribute for selected tab indicated by url\n      this.activateTab(tabhref);\n\n      // Check whether internal tab is selected (in format <tabname>-<id>)\n      // const seperatorIndex = tabhref.indexOf('-');\n      //\n      // if (seperatorIndex !== -1) {\n      //   const singular = tabhref.substring(0, seperatorIndex);\n      //   const plural = singular + 's';\n      //\n      //   this.activateTab(plural);\n      // }\n    }\n  }\n\n  /**\n   * Hash code.\n   *\n   * @param {String} text\n   *\n   * @returns {number}\n   */\n  hashCode(text) {\n    return u.md5(text);\n  }\n}\n"]}