{"version":3,"sources":["ui/checkboxes-multi-select.js"],"names":["System","register","_export","_context","setters","execute","static","selector","options","arguments","length","undefined","u","selectAll","ele","this","constructor","handle","obj","key","value","duration","inputSelector","Object","defineProperty","enumerable","configurable","writable","selectOne","assign","defaultOptions","boxes","$element","querySelectorAll","box","addEventListener","e","select","event","shiftKey","start","indexOf","call","end","last","slice","Math","min","max","forEach","chs","i","checked"],"mappings":"AAAAA,OAAOC,SAAS,IAAI,SAAUC,EAASC,GAOL,OAAAD,EAAA,6BAAA,GAAA,CAAAE,QAAA,GAAAC,QAAA,WAPlCH,EAAA,wBAAA,MACAI,cAAAC,GACA,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,CAAA,EACA,OAAAG,EAAAC,UAAAN,GAAAO,GACA,IAAAC,KAAAD,EAAAN,IAJA,CAaEQ,YAAOC,GAA+B,IAAdT,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EANH,IAAAS,EAAAC,EAAAC,IAOQ,CACpCC,SAAO,IACPC,cAAA,kDAT4BH,EAOXZ,oBAPWW,EAOrBL,MAPqBU,OAAAC,eAAAN,EAAAC,EAAA,CAAAC,MAAAA,EAAAK,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAT,EAAAC,GAAAC,EAYhCJ,KAAAA,SAAYT,EAAQqB,UAAgBrB,GAAAQ,KAAdP,QAAOe,OAAAM,OAAA,CAAA,EAAAd,KAAAe,eAAAtB,GAAKO,KAAAgB,MAAAhB,KAAAiB,SAAAC,iBAXjBlB,KAAAP,QAAAc,eAiBTP,KAhBNM,MAAU,EAiBJT,EAhBNU,UAAAA,KAAeS,OAAAG,IAChBA,EAAAC,iBAAA,SAAAC,IASKrB,KAACiB,OAAWpB,EAAEgB,EAAAA,GACd,GAUA,CACAS,OAPFxB,EAAAA,GAQI,GAPDE,KAACoB,KAOA,CAHR,GAAAG,EAAAC,SAAA,CAEAF,MAAUG,EAAO,GAAEC,QAAAC,KAAA3B,KAAAgB,MAAAG,GACZS,EAAS,GAAEF,QAAAC,KAAA3B,KAAAgB,MAAAhB,KAAA6B,MACTA,EAAOV,GAAGW,MAAAH,KAAA3B,KAAAgB,MAAAe,KAAAC,IAAAP,EAAAG,GAAAG,KAAAE,IAAAR,EAAAG,GAAA,GAEf,GAAAM,QAAAP,KAAAQ,GAAA,CAAApC,EAAAqC,KACFrC,EAAAsC,QAAArC,KAAA6B,KAAAQ,OAAA,GAOM,CACArC,KAJJ6B,KAASV,CAZX,MAKQnB,KAPJ6B,KAAKP,CAmBL,GAEJ,EAEJ","file":"checkboxes-multi-select.js","sourcesContent":["/**\n * Part of unicorn project.\n *\n * @copyright  Copyright (C) 2021 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nexport class CheckboxesMultiSelect {\n  defaultOptions = {\n    duration: 100,\n    inputSelector: 'input[type=checkbox][data-role=grid-checkbox]'\n  }\n\n  static handle(selector, options = {}) {\n    return u.selectAll(selector, (ele) => {\n      return new this(ele, options);\n    });\n  }\n\n  constructor(selector, options = {}) {\n    this.$element = u.selectOne(selector);\n    this.options = Object.assign({}, this.defaultOptions, options);\n    this.boxes = this.$element.querySelectorAll(this.options.inputSelector);\n    this.last = false;\n\n    u.selectAll(this.boxes, (box) => {\n      box.addEventListener('click', (e) => {\n        this.select(box, e);\n      });\n    });\n  }\n\n  select(box, event) {\n    if (!this.last) {\n      this.last = box;\n\n      return;\n    }\n\n    if (event.shiftKey) {\n      const start = [].indexOf.call(this.boxes, box);\n      const end = [].indexOf.call(this.boxes, this.last);\n\n      const chs = [].slice.call(this.boxes, Math.min(start, end), Math.max(start, end) + 1);\n\n      [].forEach.call(chs, (ele, i) => {\n        ele.checked = this.last.checked;\n      });\n    }\n\n    this.last = box;\n  }\n}\n"]}