{"version":3,"sources":["ui/checkboxes-multi-select.ts"],"names":[],"mappings":";;;;;;;YAAA,aAAa;YACP,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YAEnB,wBAAA,MAAa,qBAAqB;gBAWhC,MAAM,CAAC,MAAM,CAAC,QAAa,EAAE,UAAe,EAAE;oBAC5C,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,GAAQ,EAAE,EAAE;wBACxC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;oBAChC,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,YAAY,QAAa,EAAE,OAAO,GAAG,EAAE;oBAhBvC;;;;+BAAiB;4BACf,QAAQ,EAAE,GAAG;4BACb,aAAa,EAAE,+CAA+C;yBAC/D;uBAAA;oBAED;;;;;uBAAsB;oBACtB;;;;;uBAAa;oBACb;;;;;uBAAoC;oBACpC;;;;+BAAiC,KAAK;uBAAC;oBASrC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,SAAS,CAAc,QAAQ,CAAE,CAAC;oBACpD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;oBAC/D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBACxE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;oBAElB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAqB,EAAE,EAAE;wBAChD,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAa,EAAE,EAAE;4BAC9C,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBACtB,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,GAAqB,EAAE,KAAiB;oBAC7C,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;wBACd,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;wBAEhB,OAAO;qBACR;oBAED,IAAI,KAAK,CAAC,QAAQ,EAAE;wBAClB,aAAa;wBACb,MAAM,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;wBAE/C,aAAa;wBACb,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;wBAEnD,MAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBAEtF,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAqB,EAAE,CAAC,EAAE,EAAE;4BAChD,GAAG,CAAC,OAAO,GAAI,IAAI,CAAC,IAAyB,CAAC,OAAO,CAAC;wBACxD,CAAC,CAAC,CAAC;qBACJ;oBAED,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;gBAClB,CAAC;aACF,CAAA","file":"checkboxes-multi-select.js","sourcesContent":["// @ts-ignore\nconst u = window.u;\n\nexport class CheckboxesMultiSelect {\n  defaultOptions = {\n    duration: 100,\n    inputSelector: 'input[type=checkbox][data-role=grid-checkbox]'\n  }\n\n  $element: HTMLElement;\n  options: any;\n  boxes: NodeListOf<HTMLInputElement>;\n  last: HTMLInputElement | false = false;\n\n  static handle(selector: any, options: any = {}) {\n    return u.selectAll(selector, (ele: any) => {\n      return new this(ele, options);\n    });\n  }\n\n  constructor(selector: any, options = {}) {\n    this.$element = u.selectOne<HTMLElement>(selector)!;\n    this.options = Object.assign({}, this.defaultOptions, options);\n    this.boxes = this.$element.querySelectorAll(this.options.inputSelector);\n    this.last = false;\n\n    u.selectAll(this.boxes, (box: HTMLInputElement) => {\n      box.addEventListener('click', (e: MouseEvent) => {\n        this.select(box, e);\n      });\n    });\n  }\n\n  select(box: HTMLInputElement, event: MouseEvent) {\n    if (!this.last) {\n      this.last = box;\n\n      return;\n    }\n\n    if (event.shiftKey) {\n      // @ts-ignore\n      const start = [].indexOf.call(this.boxes, box);\n\n      // @ts-ignore\n      const end = [].indexOf.call(this.boxes, this.last);\n\n      const chs = [].slice.call(this.boxes, Math.min(start, end), Math.max(start, end) + 1);\n\n      [].forEach.call(chs, (ele: HTMLInputElement, i) => {\n        ele.checked = (this.last as HTMLInputElement).checked;\n      });\n    }\n\n    this.last = box;\n  }\n}\n"]}