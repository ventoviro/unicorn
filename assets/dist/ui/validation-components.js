/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["UnicornValidation"] = factory();
	else
		root["UnicornValidation"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../../../node_modules/punycode/punycode.es6.js":
/*!*********************************************************!*\
  !*** ../../../../node_modules/punycode/punycode.es6.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   toASCII: () => (/* binding */ toASCII),\n/* harmony export */   toUnicode: () => (/* binding */ toUnicode),\n/* harmony export */   ucs2decode: () => (/* binding */ ucs2decode),\n/* harmony export */   ucs2encode: () => (/* binding */ ucs2encode)\n/* harmony export */ });\n\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (punycode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/punycode/punycode.es6.js\n");

/***/ }),

/***/ "./src/modules/ui/validation-components.ts":
/*!*************************************************!*\
  !*** ./src/modules/ui/validation-components.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnicornFieldValidation: () => (/* binding */ UnicornFieldValidation),\n/* harmony export */   UnicornFormValidation: () => (/* binding */ UnicornFormValidation),\n/* harmony export */   initValidations: () => (/* binding */ initValidations),\n/* harmony export */   validators: () => (/* binding */ validatorHandlers)\n/* harmony export */ });\n/* harmony import */ var punycode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! punycode */ \"../../../../node_modules/punycode/punycode.es6.js\");\n\nconst validatorHandlers = {};\nconst defaultOptions = {\n    scroll: false,\n    scrollOffset: -100,\n    enabled: true,\n    fieldSelector: null,\n    validatedClass: null,\n};\nconst defaultFieldOptions = {\n    formSelector: '[uni-form-validate]',\n    errorSelector: '[data-field-error]',\n    selector: 'input[data-field-input], select[data-field-input], textarea[data-field-input]',\n    validClass: 'is-valid',\n    invalidClass: 'is-invalid',\n    events: ['change'],\n    errorMessageClass: 'invalid-tooltip',\n    inputOptions: false,\n    inputOptionsWrapperSelector: 'div[data-field-input]',\n    inputOptionsSelector: '[data-input-option]'\n};\nclass UnicornFormValidation {\n    app;\n    presetFields = [];\n    static globalValidators = {};\n    validators = {};\n    options;\n    $form;\n    static is = 'uni-form-validate';\n    constructor(app, el, options = {}) {\n        this.app = app;\n        this.$form = this.$helper.selectOne(el);\n        this.options = this.$helper.defaultsDeep({}, options, defaultOptions);\n        this.registerDefaultValidators();\n        this.init();\n    }\n    get $helper() {\n        return this.app.inject('$helper');\n    }\n    get $ui() {\n        return this.app.inject('$ui');\n    }\n    get $lang() {\n        return this.app.inject('$lang');\n    }\n    setOptions(options) {\n        this.options = this.$helper.defaultsDeep({}, options, defaultOptions);\n    }\n    get scrollEnabled() {\n        return this.options.scroll;\n    }\n    get scrollOffset() {\n        return Number(this.options.scrollOffset || -100);\n    }\n    get fieldSelector() {\n        return this.options.fieldSelector || 'input, select, textarea';\n    }\n    get validatedClass() {\n        return this.options.validatedClass || 'was-validated';\n    }\n    init() {\n        if (this.$form.tagName === 'FORM') {\n            this.$form.setAttribute('novalidate', 'true');\n            this.$form.addEventListener('submit', (event) => {\n                if (this.options.enabled && !this.validateAll()) {\n                    event.stopImmediatePropagation(); // Stop following events\n                    event.stopPropagation();\n                    event.preventDefault();\n                    this.$form.dispatchEvent(new CustomEvent('invalid'));\n                    return false;\n                }\n                return true;\n            }, false);\n        }\n        this.prepareFields(this.findDOMFields());\n        this.prepareFields(this.presetFields);\n    }\n    findDOMFields() {\n        return this.$helper.selectAll(this.$form.querySelectorAll(this.fieldSelector));\n    }\n    prepareFields(inputs) {\n        inputs.forEach((input) => {\n            this.prepareFieldWrapper(input);\n        });\n        // Wait next tick\n        return Promise.resolve();\n    }\n    prepareFieldWrapper(input) {\n        if (['INPUT', 'SELECT', 'TEXTAREA'].indexOf(input.tagName) !== -1) {\n            let wrapper = input.closest('[uni-field-validate]');\n            if (!wrapper) {\n                wrapper = input.closest('[data-input-container]') || input.parentElement;\n                wrapper?.setAttribute('uni-field-validate', '{}');\n            }\n            return wrapper;\n        }\n        return input;\n    }\n    findFields(containsPresets = true) {\n        let inputs = this.findDOMFields();\n        if (containsPresets) {\n            inputs.push(...this.presetFields);\n        }\n        return inputs.map((input) => this.prepareFieldWrapper(input))\n            .filter(input => input != null);\n    }\n    getFieldComponent(input) {\n        let v = this.$helper.getBoundedInstance(input, 'field.validation');\n        if (!v) {\n            const wrapper = input.closest('[uni-field-validate]');\n            if (wrapper) {\n                v = this.$helper.getBoundedInstance(wrapper, 'field.validation');\n            }\n        }\n        return v;\n    }\n    validateAll(fields) {\n        this.markFormAsUnvalidated();\n        fields = fields || this.findFields();\n        let firstFail = null;\n        for (const field of fields) {\n            const fv = this.getFieldComponent(field);\n            if (!fv) {\n                continue;\n            }\n            const result = fv.checkValidity();\n            if (!result && !firstFail) {\n                firstFail = field;\n            }\n        }\n        this.markFormAsValidated();\n        if (firstFail && this.scrollEnabled) {\n            this.scrollTo(firstFail);\n        }\n        return firstFail === null;\n    }\n    async validateAllAsync(fields) {\n        this.markFormAsUnvalidated();\n        fields = fields || this.findFields();\n        let firstFail = null;\n        const promises = [];\n        for (const field of fields) {\n            const fv = this.getFieldComponent(field);\n            if (!fv) {\n                continue;\n            }\n            promises.push(fv.checkValidityAsync().then((result) => {\n                if (!result && !firstFail) {\n                    firstFail = field;\n                }\n                return result;\n            }));\n        }\n        await Promise.all(promises);\n        this.markFormAsValidated();\n        if (firstFail && this.scrollEnabled) {\n            this.scrollTo(firstFail);\n        }\n        return firstFail === null;\n    }\n    scrollTo(element) {\n        const offset = this.scrollOffset;\n        const elementPosition = element.getBoundingClientRect().top;\n        const offsetPosition = elementPosition + window.scrollY + offset;\n        window.scrollTo({\n            top: offsetPosition,\n            behavior: 'smooth'\n        });\n    }\n    markFormAsValidated() {\n        if (!this.$form) {\n            return;\n        }\n        this.$form.classList.add(this.validatedClass);\n    }\n    markFormAsUnvalidated() {\n        if (!this.$form) {\n            return;\n        }\n        this.$form.classList.remove(this.validatedClass);\n    }\n    addField(field) {\n        this.presetFields.push(field);\n        this.prepareFieldWrapper(field);\n        return this;\n    }\n    registerDefaultValidators() {\n        for (let name in validatorHandlers) {\n            this.addValidator(name, validatorHandlers[name]);\n        }\n    }\n    /**\n     * Add validator handler.\n     */\n    addValidator(name, handler, options = {}) {\n        options = options || {};\n        this.validators[name] = {\n            handler,\n            options\n        };\n        return this;\n    }\n    /**\n     * Add validator handler.\n     */\n    static addGlobalValidator(name, handler, options = {}) {\n        options = options || {};\n        this.globalValidators[name] = {\n            handler,\n            options\n        };\n        return this;\n    }\n}\nclass UnicornFieldValidation {\n    app;\n    el;\n    $input;\n    options;\n    static is = 'uni-field-validate';\n    constructor(app, el, options = {}) {\n        this.app = app;\n        this.el = el;\n        this.options = this.$helper.defaultsDeep({}, options, defaultFieldOptions);\n        this.$input = this.selectInput();\n        this.init();\n    }\n    get $helper() {\n        return this.app.inject('$helper');\n    }\n    get $lang() {\n        return this.app.inject('$lang');\n    }\n    get $ui() {\n        return this.app.inject('$ui');\n    }\n    setOptions(options) {\n        this.options = this.$helper.defaultsDeep({}, options, defaultFieldOptions);\n    }\n    get $form() {\n        return this.getForm();\n    }\n    get errorSelector() {\n        return this.options.errorSelector;\n    }\n    get selector() {\n        return this.options.selector;\n    }\n    get validClass() {\n        return this.options.validClass;\n    }\n    get invalidClass() {\n        return this.options.invalidClass;\n    }\n    get isVisible() {\n        return !!(this.el.offsetWidth || this.el.offsetHeight || this.el.getClientRects().length);\n    }\n    get isInputOptions() {\n        return Boolean(this.options.inputOptions);\n    }\n    get validationMessage() {\n        return this.$input?.validationMessage || '';\n    }\n    get validity() {\n        return this.$input?.validity;\n    }\n    selectInput() {\n        let selector = this.selector;\n        if (this.options.inputOptions) {\n            selector += ', ' + this.options.inputOptionsWrapperSelector;\n        }\n        let input = this.el.querySelector(selector);\n        if (!input) {\n            input = this.el.querySelector('input, select, textarea');\n        }\n        if (!input) {\n            throw new Error('Input not found');\n        }\n        return this.$input = input;\n    }\n    init() {\n        this.selectInput();\n        this.bindEvents();\n        this.prepareWrapper();\n        if (this.isInputOptions) {\n            const $input = this.$input;\n            $input.validationMessage = '';\n            $input.setCustomValidity = (msg) => {\n                $input.validationMessage = String(msg);\n            };\n            $input.checkValidity = () => {\n                return this.checkInputOptionsValidity();\n            };\n        }\n    }\n    bindEvents() {\n        if (!this.$input) {\n            return;\n        }\n        this.$input.addEventListener('invalid', (e) => {\n            this.showInvalidResponse();\n        });\n        const events = this.options.events;\n        events.forEach((eventName) => {\n            this.$input.addEventListener(eventName, () => {\n                this.checkValidity();\n            });\n        });\n    }\n    prepareWrapper() {\n        if (this.el.querySelector(this.errorSelector)?.classList?.contains('invalid-tooltip')) {\n            if (window.getComputedStyle(this.el).position === 'static') {\n                this.el.style.position = 'relative';\n            }\n        }\n    }\n    checkValidity() {\n        if (!this.$input) {\n            return true;\n        }\n        if (this.$input.hasAttribute('readonly')) {\n            return true;\n        }\n        if (this.$input.hasAttribute('[data-novalidate]')) {\n            return true;\n        }\n        if (this.$input.closest('[data-novalidate]')) {\n            return true;\n        }\n        this.$input.setCustomValidity('');\n        let valid = this.$input.checkValidity();\n        if (valid && this.$form) {\n            valid = this.runCustomValidity();\n        }\n        // Raise invalid event\n        // this.$input.checkValidity();\n        this.updateValidClass(valid);\n        return valid;\n    }\n    runCustomValidity() {\n        // Check custom validity\n        const validates = (this.$input.getAttribute('data-validate') || '').split('|');\n        let result = true;\n        if (this.$input.value !== '' && validates.length) {\n            if (!this.checkCustomDataAttributeValidity()) {\n                return false;\n            }\n            for (const validatorName of validates) {\n                const [validator, options] = this.getValidator(validatorName) || [null, {}];\n                if (!validator) {\n                    continue;\n                }\n                Object.assign(options, validator.options);\n                let r = validator.handler(this.$input.value, this.$input, options, this);\n                // If return is a promise, push to stack and resolve later\n                if (r instanceof Promise || (typeof r === 'object' && r.then)) {\n                    r.then((result) => {\n                        this.handleAsyncCustomResult(result, validator);\n                    });\n                    continue;\n                }\n                if (!this.handleCustomResult(r, validator)) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    async checkValidityAsync() {\n        if (!this.$input) {\n            return true;\n        }\n        if (this.$input.hasAttribute('readonly')) {\n            return true;\n        }\n        this.$input.setCustomValidity('');\n        let valid = this.$input.checkValidity();\n        if (valid && this.$form) {\n            valid = await this.runCustomValidityAsync();\n        }\n        this.updateValidClass(valid);\n        return valid;\n    }\n    async runCustomValidityAsync() {\n        // Check custom validity\n        const validates = (this.$input.getAttribute('data-validate') || '').split('|');\n        const results = [];\n        const promises = [];\n        if (this.$input.value !== '' && validates.length) {\n            if (!this.checkCustomDataAttributeValidity()) {\n                return false;\n            }\n            for (const validatorName of validates) {\n                let [validator, options] = this.getValidator(validatorName) || [null, {}];\n                if (!validator) {\n                    continue;\n                }\n                options = Object.assign({}, options, validator.options || {});\n                promises.push(Promise.resolve(validator.handler(this.$input.value, this.$input, options, this))\n                    .then((r) => {\n                    results.push(this.handleAsyncCustomResult(r, validator));\n                    return r;\n                }));\n            }\n        }\n        await Promise.all(promises);\n        for (const result of results) {\n            if (result === false) {\n                return false;\n            }\n        }\n        return true;\n    }\n    checkCustomDataAttributeValidity() {\n        const error = this.$input.dataset.validationFail;\n        return this.handleCustomResult(error);\n    }\n    checkInputOptionsValidity() {\n        const isRequired = this.$input.getAttribute('required') != null;\n        const optionWrappers = this.$input.querySelectorAll(this.options.inputOptionsSelector);\n        let result = true;\n        if (isRequired) {\n            for (const optionWrapper of optionWrappers) {\n                const input = optionWrapper.querySelector('input');\n                result = false;\n                // Only need one checked\n                if (input?.checked) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        // Get browser input validation message\n        const n = document.createElement('input');\n        n.required = isRequired;\n        if (result) {\n            n.value = 'placeholder';\n        }\n        n.checkValidity();\n        this.$input.validationMessage = n.validationMessage;\n        this.$input.validity = n.validity;\n        for (const optionWrapper of optionWrappers) {\n            const input = optionWrapper.querySelector('input');\n            input?.setCustomValidity(n.validationMessage);\n        }\n        if (!result) {\n            this.$input.dispatchEvent(new CustomEvent('invalid'));\n        }\n        return result;\n    }\n    /**\n     * @param valid {boolean}\n     */\n    updateValidClass(valid) {\n        this.$input.classList.remove(this.invalidClass);\n        this.$input.classList.remove(this.validClass);\n        this.el.classList.remove(this.invalidClass);\n        this.el.classList.remove(this.validClass);\n        if (valid) {\n            this.$input.classList.add(this.validClass);\n            this.el.classList.add(this.validClass);\n        }\n        else {\n            this.$input.classList.add(this.invalidClass);\n            this.el.classList.add(this.invalidClass);\n        }\n    }\n    getFormValidation(element) {\n        return this.$helper.getBoundedInstance(element || this.getForm(), 'form.validation');\n    }\n    getValidator(name) {\n        const matches = name.match(/(?<type>[\\w\\-_]+)(\\((?<params>.*)\\))*/);\n        if (!matches) {\n            return null;\n        }\n        const validatorName = matches.groups?.type || '';\n        const params = matches.groups?.params || '';\n        const fv = this.getFormValidation(this.$form);\n        const validator = fv?.validators[validatorName] || UnicornFormValidation.globalValidators[validatorName];\n        if (!validator) {\n            return null;\n        }\n        const paramMatches = params.matchAll(/(?<key>\\w+)(\\s?[=:]\\s?(?<value>\\w+))?/g);\n        const options = {};\n        for (const paramMatch of paramMatches) {\n            const match = paramMatch?.groups;\n            if (!match) {\n                continue;\n            }\n            options[match.key] = handleParamValue(match.value);\n        }\n        return [validator, options];\n    }\n    handleCustomResult(result, validator) {\n        if (typeof result === 'string') {\n            this.$input.setCustomValidity(result);\n            result = result === '';\n        }\n        else if (result === undefined) {\n            result = true;\n        }\n        if (result) {\n            this.$input.setCustomValidity('');\n        }\n        else if (validator) {\n            this.raiseCustomErrorState(validator);\n        }\n        return result;\n    }\n    handleAsyncCustomResult(result, validator) {\n        result = this.handleCustomResult(result, validator);\n        // Fire invalid events\n        this.$input.checkValidity();\n        this.updateValidClass(result);\n        return result;\n    }\n    raiseCustomErrorState(validator) {\n        let help;\n        if (this.$input.validationMessage === '') {\n            help = validator.options?.notice;\n            if (typeof help === 'function') {\n                help = help(this.$input, this);\n            }\n            if (help != null) {\n                this.$input.setCustomValidity(help);\n            }\n        }\n        if (this.$input.validationMessage === '') {\n            this.$input.setCustomValidity(this.$lang.__('unicorn.message.validation.custom.error'));\n        }\n        this.$input.dispatchEvent(new CustomEvent('invalid'));\n    }\n    setAsInvalidAndReport(error) {\n        this.setCustomValidity(error);\n        this.showInvalidResponse();\n    }\n    setCustomValidity(error) {\n        this.$input.setCustomValidity(error);\n    }\n    reportValidity() {\n        if (this.validationMessage !== '') {\n            this.showInvalidResponse();\n        }\n    }\n    showInvalidResponse() {\n        this.updateValidClass(false);\n        /** @type ValidityState */\n        const state = this.$input.validity;\n        let message = this.$input.validationMessage;\n        for (let key in state) {\n            if (state[key] && this.$input.dataset[key + 'Message']) {\n                message = this.$input.dataset[key + 'Message'] || '';\n                break;\n            }\n        }\n        if (!this.isVisible) {\n            let title = this.findLabel()?.textContent;\n            if (!title) {\n                title = this.$input.name;\n            }\n            this.$ui.renderMessage(`Field: ${title} - ${message}`, 'warning');\n        }\n        let $help = this.el.querySelector(this.errorSelector);\n        if (!$help) {\n            $help = this.createHelpElement();\n            this.el.appendChild($help);\n            this.prepareWrapper();\n        }\n        $help.textContent = message;\n    }\n    createHelpElement() {\n        const className = this.options.errorMessageClass;\n        const parsed = this.parseSelector(this.errorSelector || '');\n        const $help = this.$helper.html(`<div class=\"${className}\"></div>`);\n        $help.classList.add(...parsed.classes);\n        parsed.attrs.forEach((attr) => {\n            $help.setAttribute(attr[0], attr[1] || '');\n        });\n        parsed.ids.forEach((id) => {\n            $help.id = id;\n        });\n        return $help;\n    }\n    /**\n     * @see https://stackoverflow.com/a/17888178\n     */\n    parseSelector(subselector) {\n        const obj = { tags: [], classes: [], ids: [], attrs: [] };\n        for (const token of subselector.split(/(?=\\.)|(?=#)|(?=\\[)/)) {\n            switch (token[0]) {\n                case '#':\n                    obj.ids.push(token.slice(1));\n                    break;\n                case '.':\n                    obj.classes.push(token.slice(1));\n                    break;\n                case '[':\n                    obj.attrs.push(token.slice(1, -1).split('='));\n                    break;\n                default:\n                    obj.tags.push(token);\n                    break;\n            }\n        }\n        return obj;\n    }\n    setAsValidAndClearResponse() {\n        this.setCustomValidity('');\n        this.updateValidClass(true);\n        this.clearInvalidResponse();\n    }\n    clearInvalidResponse() {\n        const $help = this.el.querySelector(this.errorSelector);\n        $help.textContent = '';\n    }\n    getForm() {\n        return this.el.closest(this.options.formSelector || '[uni-form-validate]');\n    }\n    findLabel() {\n        const id = this.$input.id;\n        const wrapper = this.$input.closest('[data-field-wrapper]');\n        let label = null;\n        if (wrapper) {\n            label = wrapper.querySelector('[data-field-label]');\n        }\n        if (!label) {\n            label = document.querySelector(`label[for=\"${id}\"]`);\n        }\n        return label;\n    }\n}\nfunction camelTo(str, sep) {\n    return str.replace(/([a-z])([A-Z])/g, `$1${sep}$2`).toLowerCase();\n}\nvalidatorHandlers.username = function (value, element) {\n    const regex = new RegExp('[\\<|\\>|\"|\\'|\\%|\\;|\\(|\\)|\\&]', 'i');\n    return !regex.test(value);\n};\nvalidatorHandlers.numeric = function (value, element) {\n    const regex = /^(\\d|-)?(\\d|,)*\\.?\\d*$/;\n    return regex.test(value);\n};\nvalidatorHandlers.email = function (value, element) {\n    value = punycode__WEBPACK_IMPORTED_MODULE_0__.toASCII(value);\n    const regex = /^[a-zA-Z0-9.!#$%&â€™*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    return regex.test(value);\n};\nvalidatorHandlers.url = function (value, element) {\n    const regex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i;\n    return regex.test(value);\n};\nvalidatorHandlers.alnum = function (value, element) {\n    const regex = /^[a-zA-Z0-9]*$/;\n    return regex.test(value);\n};\nvalidatorHandlers.color = function (value, element) {\n    const regex = /^#(?:[0-9a-f]{3}){1,2}$/;\n    return regex.test(value);\n};\n/**\n * @see  http://www.virtuosimedia.com/dev/php/37-tested-php-perl-and-javascript-regular-expressions\n */\nvalidatorHandlers.creditcard = function (value, element) {\n    const regex = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|622((12[6-9]|1[3-9][0-9])|([2-8][0-9][0-9])|(9(([0-1][0-9])|(2[0-5]))))[0-9]{10}|64[4-9][0-9]{13}|65[0-9]{14}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})*$/;\n    return regex.test(value);\n};\nvalidatorHandlers.ip = function (value, element) {\n    const regex = /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/;\n    return regex.test(value);\n};\nvalidatorHandlers['password-confirm'] = function (value, element) {\n    const selector = element.dataset.confirmTarget;\n    if (!selector) {\n        throw new Error('Validator: \"password-confirm\" must add \"data-confirm-target\" attribute.');\n    }\n    const target = document.querySelector(selector);\n    return target?.value === value;\n};\n\n// customElements.define(UnicornFormValidateElement.is, UnicornFormValidateElement);\n// customElements.define(UnicornFieldValidateElement.is, UnicornFieldValidateElement);\nfunction initValidations(app) {\n    const directive = app.inject('$directive');\n    const helper = app.inject('$helper');\n    directive.register('form-validate', {\n        mounted(el, binding) {\n            helper.getBoundedInstance(el, 'form.validation', (ele) => {\n                return new UnicornFormValidation(app, ele, JSON.parse(binding.value || '{}'));\n            });\n        },\n        updated(el, binding) {\n            const instance = helper.getBoundedInstance(el, 'form.validation');\n            instance.setOptions(JSON.parse(binding.value || '{}'));\n        }\n    });\n    directive.register('field-validate', {\n        mounted(el, binding) {\n            helper.getBoundedInstance(el, 'field.validation', (ele) => {\n                return new UnicornFieldValidation(app, ele, JSON.parse(binding.value || '{}'));\n            });\n        },\n        updated(el, binding) {\n            const instance = helper.getBoundedInstance(el, 'field.validation');\n            instance?.setOptions(JSON.parse(binding.value || '{}') || {});\n        }\n    });\n}\nfunction handleParamValue(value) {\n    if (!isNaN(Number(value))) {\n        return Number(value);\n    }\n    if (value === 'null') {\n        return null;\n    }\n    if (value === 'true') {\n        return true;\n    }\n    if (value === 'false') {\n        return true;\n    }\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/ui/validation-components.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/modules/ui/validation-components.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});